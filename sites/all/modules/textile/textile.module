<?php
// $Id: textile.module,v 1.22 2008/10/13 21:16:34 joshk Exp $

/**
 * The textile module allows input of Textile shorthand.
 *
 * @version $Id: textile.module,v 1.22 2008/10/13 21:16:34 joshk Exp $
 * @copyright Copyright (c) 2003-2007 Jim Riggs.  All rights reserved.
 * @author Jim Riggs <drupal at jim and lissa dot com>
 */

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_filter().
 */
function textile_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(t("Textile"));

    case 'description':
      return t('Allows content to be submitted using Textile, a simple, plain text syntax that is filtered into valid XHTML.');

    case 'process':
      if (variable_get("textile_tags_$format", 0)) {
        return preg_replace_callback('{\[textile\](.*?)(\[/textile\]|$)}is', '_textile_process', $text);
      }
      else {
        return _textile_process(array(NULL, $text));
      }

    case 'settings':
      $form = array();
      $form['textile_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Textile filter'),
        '#collapsible' => TRUE
      );
      $form['textile_settings']["textile_tags_$format"] = array(
        '#type' => 'checkbox',
        '#title' => t('Use tags'),
        '#default_value' => variable_get("textile_tags_$format", 0),
        '#description' => t('If enabled, only text between [textile] and optional [/textile] tags will be processed.  Otherwise, all text will be processed as Textile markup.')
      );

      return $form;

    default:
      return $text;
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function textile_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('
<h1>Textile Help</h1>

<h2>Block modifier syntax:</h2>

<p>
  CSS attributes can be applied to blocks (paragraphs, headers,
  etc.). CSS classes are specifed with "<code>(<i>class</i>)</code>";
  CSS IDs are specified with "<code>(#<i>id</i>)</code>"; both can be
  specified with "<code>(<i>class</i>#<i>id</i>)</code>". An arbtirary
  CSS style can be applied by using
  "<code>{<i>style</i>}</code>". Finally, language attributes are
  applied using "<code>[<i>language</i>]</code>".
</p>
<p>
  Additionally, alignment and indentation shorthands are provided. To
  left-align, right-align, center, and justify text, use
  "<code>&lt;</code>", "<code>&gt;</code>", "<code>=</code>", and
  "<code>&lt;&gt;</code>", respectively. "<code>(</code>" left-indents
  a block 1em for each occurrence, and "<code>)</code>" right-indents
  similarly.
</p>
<p>
  Tables have additional options. "<code>^</code>", "<code>-</code>",
  and "<code>~</code>" specify top, middle, and bottom vertical
  alignment. The "<code>_</code>" attribute on a cell indicates that
  it is a table header.
</p>
<p>
  The examples below illustrate these attributes.
</p>

<table>
<tr>
  <th>textile input</th>
  <th>output</th>
</tr>

<tr class="dark">
  <td colspan="2">
    <h3>Headings</h3>
    <code>h<i>x</i>.</code> (where <i>x</i> is 1 - 6)
  </td>
</tr>
<tr class="light">
  <td>h1. Heading</td>
  <td><h1>Heading</h1></td>
</tr>
<tr class="light">
  <td>h2(class). Heading with class</td>
  <td><h2 class="class">Heading with class</h2></td>
</tr>

<tr class="dark">
  <td colspan="2"><h3>Paragraphs</h3></td>
</tr>
<tr class="light">
  <td>p=. Centered text</td>
  <td><p style="text-align:center;">Centered text</p></td>
</tr>
<tr class="light">
  <td>p())(#id). Indented text with ID</td>
  <td>
    <p style="padding-left:1em;padding-right:2em;" id="id">Indented
    text with ID</p>
  </td>
</tr>

<tr class="dark">
  <td colspan="2"><h3>Block quotes</h3></td>
</tr>
<tr class="light">
  <td>bq(class#id). Quote with class and ID</td>
  <td>
    <blockquote class="class" id="id">Quote with class and
    ID</blockquote>
  </td>
</tr>
<tr class="light">
  <td>bq[en]. English quote</td>
  <td>
    <blockquote lang="en">English quote</blockquote>
  </td>
</tr>

<tr class="dark">
  <td colspan="2"><h3>Ordered lists</h3></td>
</tr>
<tr class="light">
  <td>
    {color: blue}# Attributes specified<br />
    # before the first item<br />
    # affect the whole list
  </td>
  <td>
    <ol style="color:blue;">
      <li>Attributes specified</li>
      <li>before the first item</li>
      <li>affect the whole list</li>
    </ol>
  </td>
</tr>

<tr class="dark">
  <td colspan="2"><h3>Unordered lists</h3></td>
</tr>
<tr class="light">
  <td>
    * Lists can have<br />
    ## subitems or<br />
    ## sublists<br />
    * too
  </td>
  <td>
    <ul>
      <li>Lists can have
        <ol>
          <li>subitems or</li>
          <li>sublists</li>
        </ol>
      </li>
      <li>too</li>
    </ul>
  </td>
</tr>

<tr class="dark">
  <td colspan="2">
    <h3>Footnotes</h3>
    <code>fn<i>x</i>.</code> (where <i>x</i> is 1 - 100)
  </td>
</tr>
<tr class="light">
  <td>fn17. Footnote</td>
  <td><p id="fn17"><sup>17</sup> Footnote</p></td>
</tr>

<tr class="dark">
  <td colspan="2"><h3>Tables</h3></td>
</tr>
<tr class="light">
  <td>
    |_. A|_. B|_. C|<br />
    (dark). |very|simple|table|<br />
    |&lt;. left|=. center|&gt;. right|<br />
    |^{height:3em}. top|-. middle|~. bottom|
  </td>
  <td>
    <table>
    <tr>
      <th>A</th>
      <th>B</th>
      <th>C</th>
    </tr>
    <tr class="dark">
      <td>very</td>
      <td>simple</td>
      <td>table</td>
    </tr>
    <tr>
      <td style="text-align:left;">left</td>
      <td style="text-align:center;">center</td>
      <td style="text-align:right;">right</td>
    </tr>
    <tr>
      <td style="vertical-align:top;height:3em;">top</td>
      <td style="vertical-align:middle;">middle</td>
      <td style="vertical-align:bottom;">bottom</td>
    </tr>
    </table>
  </td>
</tr>
</table>

<h2>Phrase modifier syntax:</h2>
<p>
  The class, ID, style, and language attributes described above also
  apply to the span phrase modifier as shown below.
</p>

<table>
<tr>
  <th>textile input</th>
  <th>output</th>
</tr>
<tr class="dark">
  <td>_emphasis_</td>
  <td><em>emphasis</em></td>
</tr>
<tr class="light">
  <td>__italic__</td>
  <td><i>italic</i></td>
</tr>
<tr class="dark">
  <td>*strong*</td>
  <td><strong>strong</strong></td>
</tr>
<tr class="light">
  <td>**bold**</td>
  <td><b>bold</bold></td>
</tr>
<tr class="dark">
  <td>??citation??</td>
  <td><cite>citation</cite></td>
</tr>
<tr class="light">
  <td>-delete text-</td>
  <td><del>deleted text</del></td>
</tr>
<tr class="dark">
  <td>+inserted text+</td>
  <td><ins>inserted text</ins></td>
</tr>
<tr class="light">
  <td>^superscript^</td>
  <td><sup>superscript</sup></td>
</tr>
<tr class="dark">
  <td>~subscript~</td>
  <td><sub>subscript</sub></td>
</tr>
<tr class="light">
  <td>@code@</td>
  <td><code>code</code></td>
</tr>
<tr class="dark">
  <td>%(class)span%</td>
  <td><span class="class">span</span></td>
</tr>
<tr class="dark">
  <td>%{color:red;}span%</td>
  <td><span style="color:red;">span</span></td>
</tr>
<tr class="light">
  <td>==no textile==</td>
  <td>no textile</td>
</tr>
<tr class="dark">
  <td>"link text":url</td>
  <td><a href="url">link text</a></td>
</tr>
<tr class="light">
  <td>"link text(title)":url</td>
  <td><a href="url" title="title">link text</a></td>
</tr>
<tr class="dark">
  <td>!imageurl!</td>
  <td><img src="imageurl" /></td>
</tr>
<tr class="light">
  <td>!imageurl(alt text)!</td>
  <td><img src="imageurl" alt="alt text" /></td>
</tr>
<tr class="dark">
  <td>!imageurl!:url</td>
  <td><a href="imageurl"><img src="imageurl" /></a></td>
</tr>
<tr class="light">
  <td>ABC(Always Be Closing)</td>
  <td><acronym title="Always Be Closing">ABC</acronym></td>
</tr>
<tr class="dark">
  <td>Footnote reference[17]</td>
  <td>Footnote reference<sup><a href="#17">17</a></sup></td>
</tr>
</table>
');
  }
  elseif (variable_get("textile_tags_$format", 0)) {
    return t('You can use Textile markup to format text between the [textile] and (optional) [/textile] tags.');
  }
  else {
    return t('You can use Textile markup to format text.');
  }
}

/**
 * Implementation of hook_help().
 */
function textile_help($path = 'admin/help#textile', $arg) {
  switch ($path) {
    case 'admin/help#textile':
      return t('
<p>
  The Textile module allows users to enter content using Textile, a
  simple, plain text syntax that is filtered into valid XHTML. The <a
  href="filter/tips" title="Textile help">filter tips page</a>
  provides syntax descriptions and examples.
</p>
');
  }
}

/**
 * Implementation of hook_enable()
 *
 * Run a check for the library and set an error message if not present.
 */
function textile_enable() {
  if ($error = _textile_lib_check()) {
    drupal_set_message($error, 'error');
  }
}


/********************************************************************
 * Module Functions
 ********************************************************************/

/**
 * Performs the appropriate Textile filtering on the provided text.
 *
 * @param $matches
 *   The <code>array</code> specifying the text to be filtered at
 *   index 1.
 *
 * @return
 *   A <code>string</code> containing the filtered text.
 *
 * @private
 */
function _textile_process($matches) {
  static $textile = NULL;

  if ($textile === NULL) {
    $path = drupal_get_path('module', 'textile');
    include_once($path .'/classTextile.php');

    $textile = new Textile();
    //$textile->hu is the string that preceeds all relative URLs.
    //So I copied the part of url() implementation in common.inc
    //not tested in real non-Apache webserver yet
    $textile->hu = base_path() . ((strpos($_SERVER['SERVER_SOFTWARE'], 'Apache') === FALSE) ? 'index.php' : '') . ((bool)variable_get('clean_url', '0') ? '' : '?q=');
  }
  //should there be any encoding declaration of some sort?  Can't find how to do it though
  return $textile->TextileThis($matches[1]);
}

/**
 * Checking that the classTextile.php library is installed, and if not return an error string.
 */

function _textile_lib_check() {
  $path = drupal_get_path('module', 'textile');
  if (!file_exists($path .'/classTextile.php')) {
    return t('The classTextile.php library is missing. Drupal cannot use textile markup without this library. Please check the <a href="!url">textile module INSTALL documentation</a> for information on how to download this.', array('!url' => 'http://cvs.drupal.org/viewcvs/*checkout*/drupal/contributions/modules/textile/INSTALL.txt'));
  }
}
